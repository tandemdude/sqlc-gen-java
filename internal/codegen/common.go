package codegen

import (
	"fmt"
	"os"
	"strings"

	"github.com/tandemdude/sqlc-gen-java/internal/core"
)

type IndentStringBuilder struct {
	strings.Builder

	indentChar          string
	charsPerIndentLevel int
}

func NewIndentStringBuilder(indentChar string, charsPerIndentLevel int) *IndentStringBuilder {
	return &IndentStringBuilder{
		indentChar:          indentChar,
		charsPerIndentLevel: charsPerIndentLevel,
	}
}

func (b *IndentStringBuilder) WriteIndentedString(level int, s string) int {
	count, _ := b.WriteString(strings.Repeat(b.indentChar, level*b.charsPerIndentLevel) + s)
	return count
}

func (b *IndentStringBuilder) writeSqlcHeader() {
	sqlcVersion := os.Getenv("SQLC_VERSION")

	b.WriteString("// Code generated by sqlc. DO NOT EDIT.\n")
	b.WriteString("// versions:\n")
	b.WriteString("//   sqlc " + sqlcVersion + "\n")
	b.WriteString("//   sqlc-gen-java " + core.PluginVersion + "\n")
}

type nullableHelper struct {
	ShouldOutput bool
	ReturnType   string
	ArgType      string
}

func (b *IndentStringBuilder) writeNullableHelpers(nullableHelpers core.NullableHelpers, nonNullAnnotation, nullableAnnotation string) {
	methodTypes := []nullableHelper{
		{nullableHelpers.Int, "Integer", "Int"},
		{nullableHelpers.Long, "Long", "Long"},
		{nullableHelpers.Float, "Float", "Float"},
		{nullableHelpers.Double, "Double", "Double"},
		{nullableHelpers.Boolean, "Boolean", "Boolean"},
	}

	for _, methodType := range methodTypes {
		if !methodType.ShouldOutput {
			continue
		}

		b.WriteIndentedString(1, fmt.Sprintf(
			"private static %s get%s(%s rs, int col) throws SQLException {\n",
			core.Annotate(methodType.ReturnType, nullableAnnotation),
			methodType.ArgType,
			core.Annotate("ResultSet", nonNullAnnotation),
		))
		b.WriteIndentedString(2, fmt.Sprintf(
			"var colVal = rs.get%s(col); return rs.wasNull() ? null : colVal;\n",
			methodType.ArgType,
		))
		b.WriteIndentedString(1, "}\n")
	}

	if nullableHelpers.List {
		b.WriteIndentedString(1, fmt.Sprintf(
			"private static <T> %s getList(%s rs, int col, Class<T[]> as) throws SQLException {\n",
			core.Annotate("List<T>", nullableAnnotation),
			core.Annotate("ResultSet", nonNullAnnotation),
		))
		b.WriteIndentedString(2, "var colVal = rs.getArray(col); return colVal == null ? null : Arrays.asList(as.cast(colVal.getArray()));\n")
		b.WriteIndentedString(1, "}\n")
	}
}

func (b *IndentStringBuilder) writeParameter(javaType core.JavaType, name, nonNullAnnotation, nullableAnnotation string) ([]string, error) {
	imp, jt, err := core.ResolveImportAndType(javaType.Type)
	if err != nil {
		return nil, err
	}
	imports := []string{imp}

	if javaType.IsList {
		imports = append(imports, "java.util.List")
		jt = "List<" + jt + ">"
	}

	annotation := nonNullAnnotation
	if javaType.IsNullable {
		annotation = nullableAnnotation
	}

	newType, unboxed := core.MaybeUnbox(javaType.Type, javaType.IsNullable)
	if !unboxed {
		newType = core.Annotate(jt, annotation)
	}

	b.WriteIndentedString(2, newType+" "+name)
	return imports, nil
}
