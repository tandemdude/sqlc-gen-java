package codegen

import (
	"fmt"
	"github.com/tandemdude/sqlc-gen-java/internal/core"
	"os"
	"slices"
	"strings"
	"unicode"
	"unicode/utf8"
)

type IndentStringBuilder struct {
	strings.Builder

	indentChar          string
	charsPerIndentLevel int
}

func NewIndentStringBuilder(indentChar string, charsPerIndentLevel int) *IndentStringBuilder {
	return &IndentStringBuilder{
		indentChar:          indentChar,
		charsPerIndentLevel: charsPerIndentLevel,
	}
}

func (b *IndentStringBuilder) WriteIndentedString(level int, s string) int {
	count, _ := b.WriteString(strings.Repeat(b.indentChar, level*b.charsPerIndentLevel) + s)
	return count
}

func (b *IndentStringBuilder) writeSqlcHeader() {
	sqlcVersion := os.Getenv("SQLC_VERSION")

	b.WriteString("// Code generated by sqlc. DO NOT EDIT.\n")
	b.WriteString("// versions:\n")
	b.WriteString("//   sqlc " + sqlcVersion + "\n")
	b.WriteString("//   sqlc-gen-java " + core.PluginVersion + "\n")
}

// resolveImportAndType extracts the import required, and type representation of the given java type.
func resolveImportAndType(typ string) (string, string, error) {
	if !strings.Contains(typ, ".") {
		return "", typ, nil
	}

	parts := strings.Split(typ, ".")
	capitalIdx := slices.IndexFunc(parts, func(s string) bool {
		r, _ := utf8.DecodeRuneInString(s)
		return unicode.IsUpper(r)
	})

	if capitalIdx == -1 {
		// fatal error, this should never happen
		return "", "", fmt.Errorf("failed resolving type and import for %s", typ)
	}

	if capitalIdx == 0 {
		// special case - nested class in same package, no import required
		return "", strings.Join(parts, "."), nil
	}
	// build the import and the type name from the resolved outer class name
	return strings.Join(parts[:capitalIdx+1], "."), strings.Join(parts[capitalIdx:], "."), nil
}
